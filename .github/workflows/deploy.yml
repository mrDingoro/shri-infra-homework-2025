name: 4. –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–Ω (—Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫)

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: '–í–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞ –¥–ª—è –¥–µ–ø–ª–æ—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5)'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      uses: actions/checkout@v4

    - name: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Yandex Container Registry
      uses: docker/login-action@v3
      with:
        registry: cr.yandex
        username: json_key
        password: ${{ secrets.YC_SA_JSON_CREDENTIALS }}

    - name: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞
      run: |
        IMAGE_NAME="cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ github.event.inputs.release_version }}_latest"
        echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–∞: $IMAGE_NAME"

        if docker manifest inspect $IMAGE_NAME > /dev/null 2>&1; then
          echo "‚úÖ Docker –æ–±—Ä–∞–∑ –Ω–∞–π–¥–µ–Ω: $IMAGE_NAME"
          echo "IMAGE_EXISTS=true" >> $GITHUB_ENV
        else
          echo "‚ùå Docker –æ–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω: $IMAGE_NAME"
          echo "IMAGE_EXISTS=false" >> $GITHUB_ENV
          exit 1
        fi

    - name: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.VM_SSH_KEY }}

    - name: –î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω VM
      run: |
        IMAGE_NAME="cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ github.event.inputs.release_version }}_latest"

        ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} << EOF
          echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –æ–±—Ä–∞–∑–∞ $IMAGE_NAME"

          # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Yandex Container Registry
          echo '${{ secrets.YC_SA_JSON_CREDENTIALS }}' | docker login --username json_key --password-stdin cr.yandex

          # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          docker stop shri-app || true
          docker rm shri-app || true

          # –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑
          docker pull $IMAGE_NAME

          # –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          docker run -d \
            --name shri-app \
            --restart unless-stopped \
            -p 80:3000 \
            -e NODE_ENV=production \
            $IMAGE_NAME

          # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
          sleep 5
          if docker ps | grep -q shri-app; then
            echo "‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω"
            echo "DEPLOY_STATUS=success" >> deployment_status.txt
          else
            echo "‚ùå –î–µ–ø–ª–æ–π –Ω–µ —É–¥–∞–ª—Å—è"
            echo "DEPLOY_STATUS=failed" >> deployment_status.txt
            exit 1
          fi
        EOF

    - name: –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è –≤ issues
      uses: actions/github-script@v7
      with:
        script: |
          const releaseVersion = '${{ github.event.inputs.release_version }}';

          // –ù–∞–π—Ç–∏ issue —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Ä–µ–ª–∏–∑–æ–º
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'release',
            state: 'open'
          });

          const releaseIssue = issues.find(issue =>
            issue.title.includes(`–†–µ–ª–∏–∑ ${releaseVersion}`)
          );

          const deploymentComment = `## üöÄ –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–Ω

          **–î–∞—Ç–∞ –¥–µ–ø–ª–æ—è:** ${new Date().toLocaleString('ru-RU')}
          **–ê–≤—Ç–æ—Ä –¥–µ–ø–ª–æ—è:** @${{ github.actor }}
          **–í–µ—Ä—Å–∏—è:** ${releaseVersion}

          ### –°—Ç–∞—Ç—É—Å:
          ‚úÖ –†–µ–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–∞—á–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–Ω

          ### –î–µ—Ç–∞–ª–∏:
          - Docker –æ–±—Ä–∞–∑: \`cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${releaseVersion}_latest\`
          - –•–æ—Å—Ç: \`${{ secrets.VM_HOST }}\`
          - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: \`shri-app\`
          - –ü–æ—Ä—Ç: \`80:3000\`

          üéâ **–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!**
          `;

          if (releaseIssue) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: releaseIssue.number,
              body: deploymentComment
            });

            console.log('–û–±–Ω–æ–≤–ª–µ–Ω issue #' + releaseIssue.number);
          } else {
            console.log('–ù–µ –Ω–∞–π–¥–µ–Ω —Å–≤—è–∑–∞–Ω–Ω—ã–π issue –¥–ª—è –≤–µ—Ä—Å–∏–∏ ' + releaseVersion);
          }
