name: 3. üöÄ –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–Ω (—Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫)

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: |
          –í–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞ –¥–ª—è –¥–µ–ø–ª–æ—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ semver (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.0.0, 2.1.0)

          üìç –ì–¥–µ –Ω–∞–π—Ç–∏:
          ‚Ä¢ Actions ‚Üí "3. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞" ‚Üí –≤–µ—Ä—Å–∏—è –ø–æ—Å–ª–µ v
          ‚Ä¢ Issues ‚Üí "–†–µ–ª–∏–∑ v1.0.0" ‚Üí –≤–µ—Ä—Å–∏—è –ø–æ—Å–ª–µ v
          ‚Ä¢ Code ‚Üí Tags ‚Üí –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥ (v1.0.0)
          ‚Ä¢ Releases ‚Üí –≤–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞

          ‚ö†Ô∏è –î–µ–ø–ª–æ–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–µ–ª–∏–∑—ã!
          ‚ö†Ô∏è –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–µ—Ä—Å–∏—é –ë–ï–ó –ø—Ä–µ—Ñ–∏–∫—Å–∞ 'v' (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.0.0, –∞ –Ω–µ v1.0.0)

          –ü—Ä–∏–º–µ—Ä: 1.0.0
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–µ—Ä—Å–∏–∏
      run: |
        VERSION="${{ github.event.inputs.release_version }}"
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏: $VERSION"
          echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 1.0.0, 2.1.0, etc. (–ë–ï–ó –ø—Ä–µ—Ñ–∏–∫—Å–∞ 'v')"
          exit 1
        fi
        echo "‚úÖ –í–µ—Ä—Å–∏—è $VERSION –≤–∞–ª–∏–¥–Ω–∞"

    - name: –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      uses: actions/checkout@v4

    - name: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Yandex Container Registry
      uses: docker/login-action@v3
      with:
        registry: cr.yandex
        username: json_key
        password: ${{ secrets.YC_SA_JSON_CREDENTIALS }}

    - name: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞
      run: |
        IMAGE_NAME="cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ github.event.inputs.release_version }}-latest"
        echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–∞: $IMAGE_NAME"

        if docker manifest inspect $IMAGE_NAME > /dev/null 2>&1; then
          echo "‚úÖ Docker –æ–±—Ä–∞–∑ –Ω–∞–π–¥–µ–Ω: $IMAGE_NAME"
          echo "IMAGE_EXISTS=true" >> $GITHUB_ENV
        else
          echo "‚ùå Docker –æ–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω: $IMAGE_NAME"
          echo "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"
          echo "1. –†–µ–ª–∏–∑ v${{ github.event.inputs.release_version }} –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω"
          echo "2. –•–æ—Ç—Ñ–∏–∫—Å –Ω–µ –±—ã–ª –ø—Ä–∏–º–µ–Ω–µ–Ω (–µ—Å–ª–∏ –¥–µ–ø–ª–æ–∏—Ç–µ –ø–æ—Å–ª–µ —Ö–æ—Ç—Ñ–∏–∫—Å–∞)"
          echo "3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏"
          echo ""
          echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—Ä–∞–∑—ã –¥–ª—è –≤–µ—Ä—Å–∏–∏ ${{ github.event.inputs.release_version }}:"
          docker images --filter "reference=cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ github.event.inputs.release_version }}*" --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" || echo "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤"
          echo "IMAGE_EXISTS=false" >> $GITHUB_ENV
          exit 1
        fi

    - name: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.VM_SSH_KEY }}

    - name: –î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω VM
      run: |
        IMAGE_NAME="cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${{ github.event.inputs.release_version }}-latest"
        VERSION="${{ github.event.inputs.release_version }}"

        ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} << EOF
          echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –≤–µ—Ä—Å–∏–∏ v$VERSION"
          echo "–û–±—Ä–∞–∑: $IMAGE_NAME"

          # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Yandex Container Registry
          echo '${{ secrets.YC_SA_JSON_CREDENTIALS }}' | docker login --username json_key --password-stdin cr.yandex

          # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          docker stop shri-app || true
          docker rm shri-app || true

          # –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑
          echo "–ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–∑: $IMAGE_NAME"
          docker pull $IMAGE_NAME

          # –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          echo "–ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
          docker run -d \
            --name shri-app \
            --restart unless-stopped \
            -p 80:3000 \
            -e NODE_ENV=production \
            -e APP_VERSION=v$VERSION \
            $IMAGE_NAME

          # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
          sleep 5
          if docker ps | grep -q shri-app; then
            echo "‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω"
            echo "–í–µ—Ä—Å–∏—è v$VERSION —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞"
            echo "DEPLOY_STATUS=success" >> deployment_status.txt
          else
            echo "‚ùå –î–µ–ø–ª–æ–π –Ω–µ —É–¥–∞–ª—Å—è"
            echo "DEPLOY_STATUS=failed" >> deployment_status.txt
            exit 1
          fi

          # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
          echo "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ:"
          docker ps --filter "name=shri-app" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        EOF

    - name: –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è –≤ issues
      uses: actions/github-script@v7
      with:
        script: |
          const releaseVersion = '${{ github.event.inputs.release_version }}';

          // –ù–∞–π—Ç–∏ issue —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Ä–µ–ª–∏–∑–æ–º
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'release',
            state: 'open'
          });

          const releaseIssue = issues.find(issue =>
            issue.title.includes(`–†–µ–ª–∏–∑ v${releaseVersion}`)
          );

          const deploymentComment = `## üöÄ –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–Ω

          **–î–∞—Ç–∞ –¥–µ–ø–ª–æ—è:** ${new Date().toLocaleString('ru-RU')}
          **–ê–≤—Ç–æ—Ä –¥–µ–ø–ª–æ—è:** @${{ github.actor }}
          **–í–µ—Ä—Å–∏—è:** v${releaseVersion}

          ### –°—Ç–∞—Ç—É—Å:
          ‚úÖ –†–µ–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–∞—á–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–Ω

          ### –î–µ—Ç–∞–ª–∏:
          - Docker –æ–±—Ä–∞–∑: \`cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${releaseVersion}-latest\`
          - –•–æ—Å—Ç: \`${{ secrets.VM_HOST }}\`
          - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: \`shri-app\`
          - –ü–æ—Ä—Ç: \`80:3000\`
          - –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: \`NODE_ENV=production\`, \`APP_VERSION=v${releaseVersion}\`

          üéâ **–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!**

          üì± **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É:** http://${{ secrets.VM_HOST }}/hw/store
          `;

          if (releaseIssue) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: releaseIssue.number,
              body: deploymentComment
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–π–±–ª –æ —Ç–æ–º, —á—Ç–æ —Ä–µ–ª–∏–∑ –∑–∞–¥–µ–ø–ª–æ–µ–Ω
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: releaseIssue.number,
              labels: ['deployed']
            });

            console.log('–û–±–Ω–æ–≤–ª–µ–Ω issue #' + releaseIssue.number);
          } else {
            console.log('–ù–µ –Ω–∞–π–¥–µ–Ω —Å–≤—è–∑–∞–Ω–Ω—ã–π issue –¥–ª—è –≤–µ—Ä—Å–∏–∏ v' + releaseVersion);
          }

    - name: –°–æ–∑–¥–∞—Ç—å deployment –≤ GitHub
      uses: actions/github-script@v7
      with:
        script: |
          const releaseVersion = '${{ github.event.inputs.release_version }}';

          // –°–æ–∑–¥–∞–µ–º deployment
          const { data: deployment } = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: `v${releaseVersion}`,
            environment: 'production',
            description: `–î–µ–ø–ª–æ–π –≤–µ—Ä—Å–∏–∏ v${releaseVersion}`,
            auto_merge: false,
            required_contexts: []
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å deployment
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.id,
            state: 'success',
            description: `–£—Å–ø–µ—à–Ω–æ –∑–∞–¥–µ–ø–ª–æ–µ–Ω–æ –Ω–∞ ${process.env.VM_HOST}`,
            environment_url: `http://${{ secrets.VM_HOST }}/hw/store`
          });

          console.log('–°–æ–∑–¥–∞–Ω deployment –¥–ª—è –≤–µ—Ä—Å–∏–∏ v' + releaseVersion);
